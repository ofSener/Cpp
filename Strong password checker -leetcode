#include <string>
#include <cmath>

using namespace std;

int strongPasswordChecker(string password) {
    int n = password.size();
    int res = 0;
    int needLower = 1, needUpper = 1, needDigit = 1;
    int seqLen = 0, seqCnt = 0, repeatCnt = 0;
    int deleteCnt = 0, replaceCnt = 0, insertCnt = 0;
    for (int i = 0; i < n; ) {
        if (islower(password[i])) needLower = 0;
        if (isupper(password[i])) needUpper = 0;
        if (isdigit(password[i])) needDigit = 0;
        int j = i;
        while (j < n && password[j] == password[i]) j++;
        seqLen = j - i;
        seqCnt += seqLen / 3;
        if (seqLen >= 3) {
            if (seqLen % 3 == 0) repeatCnt++;
            else if (seqLen % 3 == 1) repeatCnt += 2;
        }
        i = j;
    }
    int needType = needLower + needUpper + needDigit;
    if (n < 6) {
        int diff = 6 - n;
        insertCnt = diff + max(0, needType - diff);
    } else if (n <= 20) {
        if (repeatCnt > needType) {
            replaceCnt = repeatCnt;
            deleteCnt = repeatCnt;
        } else {
            replaceCnt = needType;
        }
    } else {
        int del = n - 20;
        repeatCnt -= min(del / 3, seqCnt);
        if (repeatCnt > needType) {
            replaceCnt = repeatCnt;
            deleteCnt = del - repeatCnt * 3;
        } else {
            deleteCnt = del - repeatCnt * 3;
            replaceCnt = needType;
            insertCnt = max(0, del - repeatCnt * 3 - needType);
        }
    }
    return deleteCnt + replaceCnt + insertCnt;
}
